a=2;b=3
print(a,b)
temp=a
a=b
b=temp
print(a,b)    

a=21
b=10
c=0
c=a+b
print("Line 1-Value of c is",c)
c+=a
print("Line 2-Value of c is",c)
c*=a
print("Line 3-Value of c is",c)
c/=a
print("Line 4-Value of c is",c)
c=a
c%=a
print("Line 5-Value of c is",c)
c**=a
print("Line 6-Value of c is",c)
c//=a
print("Line 7-Value of c is",c)

a=60
b=13
c=0
c=a&b;
print("Line 1-Value of c is",c)
c=a|b;
print("Line 2-Value of c is",c)

import numpy as np # type: ignore
r1 = int(input("Enter no of rows of the matrix: "))
c1 = int(input("Enter no of columns of the matrix: "))
r2 = int(input("Enter no of rows of the matrix: "))
c2 = int(input("Enter no of columns of the matrix: "))

print(f"Give {r1*c1} values for matrix 1: ")

row = []
array1 = []
array2 = []

#for array 1
for i in range(c1):
    for j in range(r1):
        row.append(int(input("")))
    array1.append(row)
    row = []
m1 = np.array(array1)
print(m1)
#for array 2

print(f"Give {r1*c1} values for matrix 1: ")
for i in range(c2):
    for j in range(r2):
        row.append(int(input("")))
    array2.append(row)
    row = []
m2 = np.array(array2)
print(m2)

op = input("Enter the operation you want to perform(+,-,*): ")
result = 0
if op == '+':
    if r1 == r2 and c1 == c2:
        result = np.add(m1,m2)
    else:
        print("Incompatible matrix addition")
elif op == '-':
    if r1 == r2 and c1 == c2:
        result = np.subtract(m1,m2)
    else:
        print("Incompatible matrix subtraction")

elif op == '*':
    if c1 != r2:
        print("Incompatible matrix multiplication")
    else:
        result = np.matmul(m1,m2)
print(result)

a=9-12/3+3*2-1
#a=?
a=9-4+3*2-1
a=9-4+6-1
a=5+6-1
a=11-1
a=10

a=2*3+4%5-3//2+6
a=6+4-1+6
a=10-1+6
a=15
print(a)

m=-43|8&0|-2
m=-43|0|-2
m=1|-2
m=1
print(m)

for i in range(1,11):
    print(f"2 x {i}={2 * i}")

a=[17,14,5,20,12]
temp=0
for i in range(0,len(a)-1):
    for j in range(i+1,len(a)):
        if a[i]>a[j]:
          temp=a[i]
          a[i]=a[j]
          a[j]=temp
print(a)

a=[1,2,3,4,5,6,7,8,9,10]
iteam=int(input("enter  no to find"))
first=0
last=10  
step=0
while(first<=last):
    mid=(last+first)//2
    if(iteam==a[mid]):
        flag=1
        step+=1
        break
    elif(iteam > a[mid]):
        first=mid+1
        step+=1
    else:
       last=mid-1
       step+=1
if(flag==1):
    print("number found")
    print("step",step)
    
else:
    print(404)
    
    # Binary Search in python


def binarySearch(array, x, low, high):

    if high >= low:

        mid = low + (high - low)//2

        # If found at mid, then return it
        if x == array[mid]:
            return mid

        # Search the right half
        elif x > array[mid]:
            return binarySearch(array, x, mid + 1, high)

        # Search the left half
        else:
            return binarySearch(array, x, low, mid - 1)

    else:
        return -1


array = [3, 4, 5, 6, 7, 8, 9]
x = 4

result = binarySearch(array, x, 0, len(array)-1)

if result != -1:
    print("Element is present at index " + str(result))
else:
    print("Not found")

def add():
    a=int(input("enter a"))
    b=int(input("enter b"))
    c=a+b 
    print(c)
add()

def add(a,b):
    c=a+b
    print(c)
a=int(input("enter a"))
b=int(input("enter b"))
add(a,b)

a=int(input("enter a value"))
b=int(input("enter a value"))
c=a
a=b
b=c
print("a=",a,"b=",b)

import math
x1=int(input("enter x1"))
y1=int(input("enter y1"))
x2=int(input("enter x2"))
y2=int(input("enter y2"))
distance = math.sqrt((x2-x1**2)+((y2-y1)**2))
print(distance)


r1 = int(input("Enter no of rows of the matrix: "))
c1 = int(input("Enter no of columns of the matrix: "))
r2 = int(input("Enter no of rows of the matrix: "))
c2 = int(input("Enter no of columns of the matrix: "))

print(f"Give {r1*c1} values for matrix 1: ")

row = []
array1 = []
array2 = []

#for array 1
for i in range(c1):
    for j in range(r1):
        row.append(int(input("")))
    array1.append(row)
    row = []
m1 = np.array(array1)
print(m1)
#for array 2

print(f"Give {r1*c1} values for matrix 1: ")
for i in range(c2):
    for j in range(r2):
        row.append(int(input("")))
    array2.append(row)
    row = []
m2 = np.array(array2)
print(m2)

op = input("Enter the operation you want to perform(+,-,*): ")
result = 0
if op == '+':
    if r1 == r2 and c1 == c2:
        result = np.add(m1,m2)
    else:
        print("Incompatible matrix addition")
elif op == '-':
    if r1 == r2 and c1 == c2:
        result = np.subtract(m1,m2)
    else:
        print("Incompatible matrix subtraction")

elif op == '*':
    if c1 != r2:
        print("Incompatible matrix multiplication")
    else:
        result = np.matmul(m1,m2)
print(result)

celsius=int(input("enter temperature in celsius"))
fahrenheit=(1.8*celsius)+32
print("temperature in fahrenheit:",fahrenheit)

import math
A=[[1,2,3],
   [3,4,5],
   [5,6,7]]
B=[[3,2,1],
   [7,6,5],
   [6,5,4]]
result=[[0,0,0],
        [0,0,0],
        [0,0,0]]
for i in range(len(A)):
    for j in range(len(B[0])):
        for k in range(len(B)):
            result[i][j] += A[i][k] * B[k][j]
for r in result:            
 print(r)

n=eval(input("enter a"))
 for i in range(1,n,1):
    if(i%5==0 and i%10!=0):
  print(i)

 a=0
 b=1
 a=eval(input("enter the number of terms:"))
 print("Fibonacci Series:")
 print(a,b)
 for i in range(1,n,1):
    c=a+b 
    print(c)
    a=b  
    b=c

 n=eval(input("enter a number:"))
 for i in range(1,n+1,1):
    if(n%i==0):
       print(i)

 n=eval(input("enter a number"))
 sum=0
 for i in range(1,n,1):
     if(n%i==0):
         sum=sum+i
 if(sum==n):
     print("the number is perfect")
 else:
     print("the number is not perfect number")

 numbers=int(input("enter no of prime numbers to be displayed:"))
 count=1
 n=2  
 while(count<=numbers):
     for i in range(2,n):
        if(n%1==0):
             break
     else:
         print(n)    
         count=count+1
         n=n+1

 for i in "welcome":
     if(i=="c"):
         break
     print(i)

import numpy


def matrix(m, n):
    d = []
    for i in range(0, m):
        l = []
        for j in range(0, n):
            v = int(input(f"Enter a{i + 1}{j + 1} = "))
            l.append(v)
        d.append(l)
    return numpy.array(d)


def minor(m, n, matrix_name, minor_value):
    minor_data = []
    for i in range(0, m):
        temp = []
        for j in range(0, n):
            if i != minor_value[0] and j != minor_value[1]:
                q = matrix_name[i][j]
                temp.append(q)
        if temp != []:
            minor_data.append(temp)
    return numpy.array(minor_data)


def cofactor(m, n, matrix_name):
    cofactor_data = []
    for i in range(0, m):
        temp = []
        for j in range(0, n):
            minor_value = (i, j)
            minor_matrix = minor(m, n, matrix_name, minor_value)
            if m == 3:
                c = ((-1) ** (i + j)) * (minor_matrix[0][0] * minor_matrix[1][1] - minor_matrix[0][1] * minor_matrix[1][0])
            elif m == 2:
                c = ((-1) ** (i + j)) * (minor_matrix[0][0])
            temp.append(c)
        cofactor_data.append(temp)
    return numpy.array(cofactor_data)


def det(m, n, cofactor_name, matrix_name):
    i = 0
    det_value = 0
    for j in range(0, n):
        det_value += cofactor_name[i][j] * matrix_name[i][j]
    return det_value


m1 = int(input("Enter Number of rows of the First Matrix = "))
n1 = int(input("Enter Number of columns of the First Matrix = "))
matrix1 = matrix(m1, n1)
m2 = int(input("Enter Number of rows of the Second Matrix = "))
n2 = int(input("Enter Number of columns of the Second Matrix = "))
matrix2 = matrix(m2, n2)
print(matrix1)
print(matrix2)
op = input("Enter operation (+, -, *, adj, det, inv) = ")
if m1 == m2 and n1 == n2:
    if op == "+":
        print(matrix1 + matrix2)
    elif op == "-":
        print(matrix1 - matrix2)
if n1 == m2 and op == "*":
    e = []
    r = []
    cell_total = 0
    for i in range(0, m1):
        for j in range(0, n2):
            for k in range(0, n1):
                q = matrix1[i][k] * matrix2[k][j]
                cell_total += q
            e.append(cell_total)
            cell_total = 0
        r.append(e)
        e = []
    product = numpy.array(r)
    print(f"Multiplication of Matrices is \n{product}")
if op == "adj" or op == "inv" or op == "det" or op == "t":
    which_one = input("Which matrix (First / Second)?").lower()
    if which_one == "first":
        m_, n_ = m1, n1
        matrix_ = matrix1
    elif which_one == "second":
        m_, n_ = m2, n2
        matrix_ = matrix2
    cofactor_result = cofactor(m_, n_, matrix_)
    adj = cofactor_result.transpose()
    det_ = det(m_, n_, cofactor_result, matrix_)
    if op == "adj":
        print(adj)
    elif op == "det":
        print(det_)
    elif op == "inv":
        inv_ = adj/det_
        print(inv_)
    elif op == "t":
        print(matrix_.transpose())

